#!/usr/bin/python3

import json, os, sys
import youtube as youtube_module
import notion as notion_module
import config
import bookmarks as bookmarks_module

#Does all the daily tasks

youtube = youtube_module.Youtube()
notion = notion_module.Notion()
bookmarks = bookmarks_module.Bookmarks()

def sortMusicPlaylists():

    print("Sorting music playlists...")

    for playlistId in config.ytMusicPlaylists:
        playlistInfo = youtube.get_playlist_info(playlistId)
        print("Sorting playlist '%s' (%s)" % (playlistId, playlistInfo["title"]))

        videos = youtube.get_playlist_videos(playlistId)

        songHashes = set()
        duplicatedSongHashes = set()
        for video in videos:
            if video["songHash"] in songHashes:
                duplicatedSongHashes.add(video["songHash"])
            else:
                songHashes.add(video["songHash"])

        for video in videos:
            if not video["isAvailable"]:
                if video["songHash"] in duplicatedSongHashes:
                    print("Video %s (%s) is no longer available but is a duplicate, removing it" % (video["id"], video["songHash"]))
                    youtube.delete_playlist_item(video["playlistitem_id"])
                    videos = [v for v in videos if v["id"] != video["id"]]
                elif video["title"] in ["Deleted video", "Privated video"]:
                    print("Video %s (%s) is no longer available, removing it" % (video["id"], video["songHash"]))
                    youtube.delete_playlist_item(video["playlistitem_id"])
                    videos = [v for v in videos if v["id"] != video["id"]]
                else:
                    if youtube.isAutoGeneratedVideo(video):
                        newId = youtube.get_new_video_id(video["id"])
                        if newId == video["id"]:
                            print("Video %s (%s) is no longer available and no new id was found, put it again in the playlist for it to be removed" % (video["id"], video["songHash"]))
                        else:
                            print("Video %s (%s) is no longer available, but is auto-generated, replacing it with %s" % (video["id"], video["songHash"], newId))
                            newVideo = youtube.add_video_to_playlist(playlistId, newId, video["position"])
                            youtube.delete_playlist_item(video["playlistitem_id"])
                            video["playlistitem_id"] = newVideo["playlistitem_id"]
                            video["id"] = newId
                            video["title"] = newVideo["title"]
                            video["description"] = newVideo["description"]
                            video["channelName"] = newVideo["channelName"]
                            video["channelId"] = newVideo["channelId"]
                            video["publishedAt"] = newVideo["publishedAt"]
                            video["songHash"] = youtube.getSongHash(newVideo)
                            video["isAvailable"] = newVideo["isAvailable"]

                    else:
                        print("Video %s (%s) is no longer available, put it again in the playlist for it to be removed" % (video["id"], video["songHash"]))


        uniqueVideos = {}
        for video in videos:
            videoHash = video["songHash"]
            if videoHash in uniqueVideos:
                print("Duplicate detected: video at pos %s with id %s '%s' is the same as video at pos %s with id %s '%s'" % (video["position"], video["id"], video["title"], uniqueVideos[videoHash]["position"], uniqueVideos[videoHash]["id"], uniqueVideos[videoHash]["title"]))
                #If the position is low, then it is a song I recently added and thus should be removed as there would be no meaningful difference (eg live/studio)
                if uniqueVideos[videoHash]["position"] < 20 and uniqueVideos[videoHash]["position"] < video["position"]:
                    print("Removing video %s" % (uniqueVideos[videoHash]["id"]))
                    youtube.delete_playlist_item(uniqueVideos[videoHash]["playlistitem_id"])
                    videos = [v for v in videos if v["id"] != uniqueVideos[videoHash]["id"]]
                elif video["position"] < 20 and video["position"] < uniqueVideos[videoHash]["position"]:
                    print("Removing video %s" % (video["id"]))
                    youtube.delete_playlist_item(video["playlistitem_id"])
                    videos = [v for v in videos if v["id"] != video["id"]]


            else:
                uniqueVideos[videoHash] = video


        artistCounts = {}
        for video in videos:
            artist = video["songHash"].split(" - ")[0]
            if artist in artistCounts:
                artistCounts[artist] += 1
            else:
                artistCounts[artist] = 1

        artistCounts = {k: v for k, v in sorted(artistCounts.items(), key=lambda item: -item[1])}
        #for artist, artistCount in artistCounts.items():
        #    print(artist, artistCount)

        if playlistId not in config.ytMusicPlaylistsToNotSort:
            videos = youtube.sort_playlist(playlistId, videos)

        #for video in videos:
        #    print(video["position"], self.getSongHash(video))


        with open("yt_playlists/"+youtube.normalize(playlistInfo["title"]).replace(" ", "_")+".json", "w+", encoding="utf-8") as f:
            f.write(json.dumps([{
                "title": v["title"],
                #"description": v["description"],
                "channelName": v["channelName"],
                "channelId": v["channelId"],
                "id": v["id"],
                "publishedAt": v["publishedAt"],
                "songHash": v["songHash"],
            } for v in videos], indent=4, ensure_ascii=False))


def backupYtPlaylists():
    print("Backing up playlists...")
    for playlistId in config.ytPlaylistsToDownload:
        youtube.download_playlist(playlistId)

    for playlistId in config.ytMusicPlaylistsToDownload:
        youtube.download_playlist(playlistId, audioOnly=True)


def backupNotion():
    print("Backing up Notion...")
    notion.backupAllPages()

def backupBookmarks():
    print("Backing up bookmarks...")
    bookmarksList = bookmarks.getBookmarks()
    with open("D:/bkp/bookmarks.json", "w+", encoding="utf-8") as f:
        f.write(json.dumps(bookmarksList, indent=4, ensure_ascii=False))

    publicBookmarks = [b for b in bookmarksList if b["title"] != "Streaming"]

    with open("D:/repos/blog/articles/bookmarks.md", "w+", encoding="utf-8") as f:
        f.write("---\naside: false\n---\n\n# Useful websites\n\n" + bookmarks.bookmarksToMarkdown(publicBookmarks))

if __name__ == "__main__":

    #sortMusicPlaylists()
    #backupYtPlaylists()
    backupNotion()
    backupBookmarks()

    print("Done")
